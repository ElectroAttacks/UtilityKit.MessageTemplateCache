<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidParameters_CodeFix" xml:space="preserve">
    <value>Correction d'une valeur incorrecte</value>
  </data>
  <data name="InvalidParameters_Description" xml:space="preserve">
    <value>Les paramètres fournis dans 'CreateRequest()' ne correspondent pas aux valeurs de métadonnées attendues (CallerMemberName, CallerFilePath et CallerLineNumber). Cet avertissement est levé lorsque les paramètres sont délibérément définis pour obtenir le modèle d'une autre méthode. Cependant, cela peut entraîner un comportement inattendu dans la gestion du modèle de message. Assurez-vous que les paramètres fournis correspondent aux métadonnées définies automatiquement par le compilateur lorsqu'il ne récupère pas intentionnellement le modèle d'une autre méthode.</value>
  </data>
  <data name="InvalidParameters_MessageFormat" xml:space="preserve">
    <value>Paramètres incorrects fournis dans 'CreateRequest()'. Le paramètre '{0}' a une valeur de '{1}' mais une valeur attendue de '{2}'</value>
  </data>
  <data name="InvalidParameters_Title" xml:space="preserve">
    <value>Des valeurs incorrectes peuvent être transmises à 'CreateRequest()'</value>
  </data>
  <data name="NoExplicitParameters_CodeFix" xml:space="preserve">
    <value>Supprimer les paramètres explicites</value>
  </data>
  <data name="NoExplicitParameters_Description" xml:space="preserve">
    <value>La transmission de paramètres explicites peut entraîner un comportement inattendu. Pour vous assurer que le modèle de message correct est renvoyé, vous devez appeler la méthode sans arguments.</value>
  </data>
  <data name="NoExplicitParameters_MessageFormat" xml:space="preserve">
    <value>'CreateRequest()' doit être appelé sans paramètres explicites</value>
  </data>
  <data name="NoExplicitParameters_Title" xml:space="preserve">
    <value>'CreateRequest()' doit être appelé sans paramètres explicites</value>
  </data>
  <data name="UniqueIdentifiers_CodeFix" xml:space="preserve">
    <value>Ajouter un identifiant unique</value>
  </data>
  <data name="UniqueIdentifiers_Description" xml:space="preserve">
    <value>L'utilisation de plusieurs modèles de message dans la même méthode nécessite des identifiants uniques. Pour vous assurer que le modèle correct est renvoyé, vous devez utiliser un identifiant unique et également le transmettre dans la requête via la méthode 'WithIdentifier()'.</value>
  </data>
  <data name="UniqueIdentifiers_MessageFormat" xml:space="preserve">
    <value>La méthode '{0}' a plusieurs modèles de message sans identifiants uniques. Assurez-vous que chaque modèle possède un identifiant unique pour éviter des résultats ambigus.</value>
  </data>
  <data name="UniqueIdentifiers_Title" xml:space="preserve">
    <value>Utiliser des identifiants uniques lors de l'utilisation de plusieurs modèles de message</value>
  </data>
</root>