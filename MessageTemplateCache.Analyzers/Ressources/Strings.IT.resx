<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidParameters_CodeFix" xml:space="preserve">
    <value>Correggere il valore errato</value>
  </data>
  <data name="InvalidParameters_Description" xml:space="preserve">
    <value>I parametri forniti in 'CreateRequest()' non corrispondono ai valori dei metadati previsti (CallerMemberName, CallerFilePath e CallerLineNumber). Questo avviso viene generato quando i parametri vengono deliberatamente impostati per ottenere il modello di un altro metodo. Tuttavia, potrebbe causare un comportamento imprevisto nella gestione del modello di messaggio. Assicurarsi che i parametri forniti corrispondano ai metadati impostati automaticamente dal compilatore quando non si recupera intenzionalmente il modello di un altro metodo.</value>
  </data>
  <data name="InvalidParameters_MessageFormat" xml:space="preserve">
    <value>Parametri non corretti forniti in 'CreateRequest()'. Il parametro '{0}' ha un valore di '{1}' ma un valore previsto di '{2}'</value>
  </data>
  <data name="InvalidParameters_Title" xml:space="preserve">
    <value>Potrebbero essere passati valori errati a 'CreateRequest()'</value>
  </data>
  <data name="NoExplicitParameters_CodeFix" xml:space="preserve">
    <value>Rimuove i parametri espliciti</value>
  </data>
  <data name="NoExplicitParameters_Description" xml:space="preserve">
    <value>Il passaggio di parametri espliciti potrebbe causare un comportamento imprevisto. Per garantire che venga restituito il modello di messaggio corretto, è necessario chiamare il metodo senza argomenti.</value>
  </data>
  <data name="NoExplicitParameters_MessageFormat" xml:space="preserve">
    <value>'CreateRequest()' deve essere chiamato senza parametri espliciti</value>
  </data>
  <data name="NoExplicitParameters_Title" xml:space="preserve">
    <value>'CreateRequest()' deve essere chiamato senza parametri espliciti</value>
  </data>
  <data name="UniqueIdentifiers_CodeFix" xml:space="preserve">
    <value>Aggiungi identificatore univoco</value>
  </data>
  <data name="UniqueIdentifiers_Description" xml:space="preserve">
    <value>L'utilizzo di più modelli di messaggio nello stesso metodo richiede identificatori univoci. Per garantire che venga restituito il modello corretto, è necessario utilizzare un identificatore univoco e passarlo anche nella richiesta tramite il metodo 'WithIdentifier()'.</value>
  </data>
  <data name="UniqueIdentifiers_MessageFormat" xml:space="preserve">
    <value>Il metodo '{0}' ha più modelli di messaggio senza identificatori univoci. Assicurati che ogni modello abbia un identificatore univoco per evitare risultati ambigui.</value>
  </data>
  <data name="UniqueIdentifiers_Title" xml:space="preserve">
    <value>Utilizzare identificatori univoci quando si utilizzano più modelli di messaggio</value>
  </data>
</root>